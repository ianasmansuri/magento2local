<?php

namespace Elsnertech\Donation\Model\Product\Type;

use Magento\Catalog\Api\ProductRepositoryInterface;
use Elsnertech\Donation\Helper\Data;


class Donation extends \Magento\Catalog\Model\Product\Type\AbstractType
{

    const TYPE_CODE = 'donation';

    
    protected $donationProductHelper;

    
    public function __construct(
        \Magento\Catalog\Model\Product\Option $catalogProductOption,
        \Magento\Eav\Model\Config $eavConfig,
        \Magento\Catalog\Model\Product\Type $catalogProductType,
        \Magento\Framework\Event\ManagerInterface $eventManager,
        \Magento\MediaStorage\Helper\File\Storage\Database $fileStorageDb,
        \Magento\Framework\Filesystem $filesystem,
        \Magento\Framework\Registry $coreRegistry,
        \Psr\Log\LoggerInterface $logger,
        ProductRepositoryInterface $productRepository,
        Data $donationProductHelper
    ) {
        $this->_catalogProductOption = $catalogProductOption;
        $this->_eavConfig = $eavConfig;
        $this->_catalogProductType = $catalogProductType;
        $this->_coreRegistry = $coreRegistry;
        $this->_eventManager = $eventManager;
        $this->_fileStorageDb = $fileStorageDb;
        $this->_filesystem = $filesystem;
        $this->_logger = $logger;
        $this->productRepository = $productRepository;
        $this->donationProductHelper = $donationProductHelper;

        parent::__construct(
            $catalogProductOption,
            $eavConfig,
            $catalogProductType,
            $eventManager,
            $fileStorageDb,
            $filesystem,
            $coreRegistry,
            $logger,
            $productRepository
        );
    }

    
    public function checkProductBuyState($product)
    {
        parent::checkProductBuyState($product);

        if (!$product->getCustomOption(Data::DONATION_OPTION_CODE)) {
            throw new \Magento\Framework\Exception\LocalizedException($this->getSpecifyOptionMessage());
        }

        return $this;
    }

    
    public function _prepareProduct(\Magento\Framework\DataObject $buyRequest, $product, $processMode)
    {
        if (!$product->getCustomOption(Data::DONATION_OPTION_CODE)) {
            return $this->getSpecifyOptionMessage()->render();
        }

        return parent::_prepareProduct($buyRequest, $product, $processMode); // TODO: Change the autogenerated stub
    }

    
    public function getSpecifyOptionMessage()
    {
        return __('You need to choose a amount to donate');
    }

    
    public function getOrderOptions($product)
    {
        $options = parent::getOrderOptions($product);

        if ($configurationOption = $product->getCustomOption(Data::DONATION_OPTION_CODE)) {
            $optionsArray = $this->donationProductHelper->optionsJsonToMagentoOptionsArray(
                $configurationOption->getValue(),
                $product
            );
            $currentOptions = (isset($options['options'])) ? $options['options'] : [];
            $options['options'] = array_merge($currentOptions, $optionsArray);
        }

        return $options;
    }

    
    public function isVirtual($product)
    {
        return true;
    }

    
    public function hasWeight()
    {
        return false;
    }

    
    public function deleteTypeSpecificData(\Magento\Catalog\Model\Product $product)
    {
    }

    
    public function prepareForCartAdvanced(\Magento\Framework\DataObject $buyRequest, $product, $processMode = null)
    {

        $typeId = $product->getTypeId();

        if ($typeId == self::TYPE_CODE && $buyRequest->getData('amount') ||
            $typeId == self::TYPE_CODE && $buyRequest->getData('amount_fixed')
        ) {
            $amountFixed = $buyRequest->getData('amount_fixed');
            $amount = $buyRequest->getData('amount');
            $finalAmount = ($amount>0) ? $amount : $amountFixed;

            if (!$finalAmount) {
                throw new \Magento\Framework\Exception\LocalizedException(__('Please enter a donation amount'));
            }

            if ($finalAmount<$this->donationProductHelper->getMinimalAmount($product)) {
                throw new \Magento\Framework\Exception\LocalizedException(
                    __('Donation amount lower then minimal amount')
                );
            }

            if ($finalAmount>$this->donationProductHelper->getMaximalAmount($product)) {
                throw new \Magento\Framework\Exception\LocalizedException(
                    __('Donation amount higher then maximal amount')
                );
            }

            $donationData['amount'] = $finalAmount;
            $product->addCustomOption(Data::DONATION_OPTION_CODE, json_encode($donationData));
        }

        return parent::prepareForCartAdvanced($buyRequest, $product, $processMode);
    }
}
